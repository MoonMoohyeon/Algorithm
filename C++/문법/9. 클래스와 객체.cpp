#include <iostream>
#include <string>

// =================================================================================
// 4. 클래스 선언부 (Class Declaration)
// =================================================================================
// '클래스'는 객체를 만들기 위한 '설계도' 또는 '틀'입니다. 
// 클래스 선언부에서는 이 설계도가 어떤 데이터(멤버 변수)와 기능(멤버 함수)을 가질지 정의합니다.
// 아래에서는 'Cat'이라는 이름의 클래스를 선언합니다.
class Cat {
// =================================================================================
// 5. 접근 제어 지시자 (Access Specifiers)
// =================================================================================
// 클래스의 멤버들에 외부에서 얼마나 접근할 수 있는지 권한을 지정합니다.
// - public: 클래스 외부 어디서든 자유롭게 접근할 수 있습니다. (공개 인터페이스)
// - private: 오직 해당 클래스의 멤버 함수 내에서만 접근할 수 있습니다. (데이터 보호)
// - protected: 상속 관계에 있는 클래스까지 접근을 허용합니다. (여기서는 다루지 않음)

private: // private 멤버들은 외부로부터 숨겨져 보호됩니다.
    // =============================================================================
    // 2. 멤버 변수 (Member Variables)
    // =============================================================================
    // 클래스 내에 선언된 변수로, 객체의 '상태'나 '속성'을 나타냅니다.
    // 예를 들어, Cat 객체는 '이름(name)'과 '나이(age)'라는 속성을 가집니다.
    std::string name;
    int age;

// =================================================================================
// 1. 캡슐화 (Encapsulation)
// =================================================================================
// 관련된 데이터(멤버 변수)와 기능(멤버 함수)을 하나의 '클래스'로 묶고,
// 외부에서 데이터에 직접 접근하지 못하도록 숨기는 것을 의미합니다. (정보 은닉, Data Hiding)
// 위에서 'name'과 'age'를 private으로 선언하고, 아래의 public 함수들을 통해서만 
// 이 데이터에 접근하도록 만든 것이 바로 캡슐화의 예시입니다.
// 이렇게 하면 데이터를 실수로 잘못된 값으로 변경하는 것을 막을 수 있습니다.

public: // public 멤버들은 외부에서 호출할 수 있는 기능들입니다.
    // =============================================================================
    // 2. 멤버 함수 (Member Functions)
    // =============================================================================
    // 클래스 내에 선언된 함수로, 객체의 '행동'이나 '기능'을 담당합니다.
    // 보통 private 멤버 변수들을 조작하거나 사용하는 역할을 합니다.

    // 생성자(Constructor): 객체가 생성될 때 자동으로 호출되는 특별한 함수입니다.
    // 주로 멤버 변수를 초기화하는 역할을 합니다. 클래스 이름과 동일해야 하고 반환형이 없습니다.
    Cat(std::string catName, int catAge);

    // 멤버 변수 'name'의 값을 설정하는 함수 (Setter)
    void setName(std::string catName);

    // 멤버 변수 'name'의 값을 반환하는 함수 (Getter)
    std::string getName();

    // 고양이가 특정 행동을 하는 것을 표현하는 멤버 함수
    void meow();
};

// =================================================================================
// 4. 클래스 구현부 (Class Definition/Implementation)
// =================================================================================
// 클래스 선언부에 명시된 멤버 함수들이 실제로 어떤 동작을 하는지 코드를 작성하는 부분입니다.
// '클래스이름::함수이름' 형태로 어떤 클래스에 속한 함수인지를 명확히 표시합니다.

Cat::Cat(std::string catName, int catAge) {
    std::cout << "생성자 호출! 새로운 고양이 객체가 생성됩니다." << std::endl;
    name = catName; // 멤버 변수 name을 초기화
    age = catAge;   // 멤버 변수 age를 초기화
}

void Cat::setName(std::string catName) {
    // 멤버 함수는 private 멤버 변수에 접근할 수 있습니다.
    name = catName;
}

std::string Cat::getName() {
    // 멤버 함수는 private 멤버 변수의 값을 읽어서 반환할 수 있습니다.
    return name;
}

void Cat::meow() {
    // private 멤버 변수인 name과 age를 사용하여 기능을 수행합니다.
    std::cout << name << "(" << age << "살): 야옹~" << std::endl;
}


int main() {
    // =============================================================================
    // 3. 클래스와 객체 (Class and Object)
    // 6. 클래스와 객체 생성 및 접근 (Object Creation and Access)
    // =============================================================================
    // - 클래스(Class): '설계도' (e.g., Cat)
    // - 객체(Object): 설계도를 바탕으로 실제로 만들어진 '실체' (e.g., kitty, nabi)
    // 'Cat'이라는 설계도를 사용해 'kitty'와 'nabi'라는 두 개의 고양이 객체를 만듭니다.
    
    std::cout << "--- 첫 번째 고양이 객체 생성 ---" << std::endl;
    Cat kitty("키티", 2); // 'kitty'라는 Cat 객체 생성. 이때 생성자가 호출됩니다.

    std::cout << "\n--- 두 번째 고양이 객체 생성 ---" << std::endl;
    Cat nabi("나비", 3); // 'nabi'라는 Cat 객체 생성.

    std::cout << "\n--- 객체 멤버에 접근 ---" << std::endl;

    // 객체의 public 멤버 함수에 접근할 때는 점(.) 연산자를 사용합니다.
    kitty.meow();
    nabi.meow();
    
    // private 멤버 변수인 'name'에 직접 접근하려고 하면 컴파일 에러가 발생합니다.
    // kitty.name = "잘못된 이름"; // 컴파일 에러! 캡슐화로 보호되고 있기 때문입니다.

    // 따라서 데이터를 변경하려면 public으로 제공된 멤버 함수(Setter)를 사용해야 합니다.
    std::cout << "\n'kitty'의 이름을 '애옹이'로 변경합니다." << std::endl;
    kitty.setName("애옹이");

    // public으로 제공된 멤버 함수(Getter)를 통해 변경된 값을 확인할 수 있습니다.
    std::cout << "새로운 이름: " << kitty.getName() << std::endl;
    kitty.meow();

    return 0;
} // main 함수가 끝나면 생성되었던 kitty와 nabi 객체는 자동으로 소멸됩니다.